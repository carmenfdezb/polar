#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

begin; require 'types.pb'; rescue LoadError; end
begin; require 'structures.pb'; rescue LoadError; end
begin; require 'exercise_phases.pb'; rescue LoadError; end

module PolarData
  # forward declarations
  class PbSteadyRacePace < ::ProtocolBuffers::Message; end
  class PbExerciseTarget < ::ProtocolBuffers::Message; end
  class PbTrainingSessionTarget < ::ProtocolBuffers::Message; end

  class PbSteadyRacePace < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbSteadyRacePace"

    required ::PbDuration, :duration, 1
    required :float, :distance, 2
  end

  class PbExerciseTarget < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbExerciseTarget"

    required ::PbExerciseTargetType, :target_type, 1
    optional ::PbSportIdentifier, :sport_id, 2
    optional ::PbVolumeTarget, :volume_target, 3
    optional ::PolarData::PbPhases, :phases, 4
    optional ::PbRouteId, :route, 5
    optional ::PolarData::PbSteadyRacePace, :steady_race_pace, 6
    optional ::PbStravaSegmentTarget, :strava_segment_target, 7
  end

  class PbTrainingSessionTarget < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbTrainingSessionTarget"

    required ::PbOneLineText, :name, 2
    optional ::PbSportIdentifier, :sport_id, 3
    optional ::PbLocalDateTime, :start_time, 4
    optional ::PbMultiLineText, :description, 5
    repeated ::PolarData::PbExerciseTarget, :exercise_target, 6
    optional :bool, :target_done, 7
    optional ::PbDuration, :duration, 8
    optional ::PbTrainingProgramId, :training_program_id, 9
    optional ::PbEventId, :event_id, 10
  end

end
