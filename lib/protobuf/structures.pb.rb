#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

begin; require 'types.pb'; rescue LoadError; end

# forward declarations
class PbVolumeTarget < ::ProtocolBuffers::Message; end
class PbTrainingLoad < ::ProtocolBuffers::Message; end
class PbHeartRateZone < ::ProtocolBuffers::Message; end
class PbSpeedZone < ::ProtocolBuffers::Message; end
class PbPowerZone < ::ProtocolBuffers::Message; end
class PbZones < ::ProtocolBuffers::Message; end
class PbBleMac < ::ProtocolBuffers::Message; end
class PbBleDeviceName < ::ProtocolBuffers::Message; end
class PbDeviceId < ::ProtocolBuffers::Message; end
class PbRunningIndex < ::ProtocolBuffers::Message; end
class PbSportIdentifier < ::ProtocolBuffers::Message; end
class PbOneLineText < ::ProtocolBuffers::Message; end
class PbMultiLineText < ::ProtocolBuffers::Message; end
class PbLanguageId < ::ProtocolBuffers::Message; end
class PbTrainingSessionTargetId < ::ProtocolBuffers::Message; end
class PbTrainingSessionFavoriteId < ::ProtocolBuffers::Message; end
class PbRouteId < ::ProtocolBuffers::Message; end
class PbSwimmingPoolInfo < ::ProtocolBuffers::Message; end
class PbTrainingProgramId < ::ProtocolBuffers::Message; end
class PbEventId < ::ProtocolBuffers::Message; end
class PbPauseTime < ::ProtocolBuffers::Message; end
class PbStravaSegmentTargets < ::ProtocolBuffers::Message; end
class PbStravaSegmentTarget < ::ProtocolBuffers::Message; end

class PbVolumeTarget < ::ProtocolBuffers::Message
  # forward declarations

  # enums
  module PbVolymeTargetType
    include ::ProtocolBuffers::Enum

    set_fully_qualified_name "PbVolumeTarget.PbVolymeTargetType"

    VOLUME_TARGET_TYPE_DURATION = 0
    VOLUME_TARGET_TYPE_DISTANCE = 1
    VOLUME_TARGET_TYPE_CALORIES = 2
  end

  set_fully_qualified_name "PbVolumeTarget"

  required ::PbVolumeTarget::PbVolymeTargetType, :target_type, 1
  optional ::PbDuration, :duration, 2
  optional :float, :distance, 3
  optional :uint32, :calories, 4
end

class PbTrainingLoad < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbTrainingLoad"

  optional :uint32, :training_load_val, 1
  optional ::PbDuration, :recovery_time, 2
  optional :uint32, :carbohydrate_consumption, 3
  optional :uint32, :protein_consumption, 4
  optional :uint32, :fat_consumption, 5
end

class PbHeartRateZone < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbHeartRateZone"

  required :uint32, :lower_limit, 1
  required :uint32, :higher_limit, 2
end

class PbSpeedZone < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbSpeedZone"

  required :float, :lower_limit, 1
  required :float, :higher_limit, 2
end

class PbPowerZone < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbPowerZone"

  required :uint32, :lower_limit, 1
  required :uint32, :higher_limit, 2
end

class PbZones < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbZones"

  repeated ::PbHeartRateZone, :heart_rate_zone, 1
  repeated ::PbSpeedZone, :speed_zone, 2
  repeated ::PbPowerZone, :power_zone, 3
  optional ::PbHeartRateZoneSettingSource, :heart_rate_setting_source, 10
  optional ::PbPowerZoneSettingSource, :power_setting_source, 11
  optional ::PbSpeedZoneSettingSource, :speed_setting_source, 12
end

class PbBleMac < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbBleMac"

  required :bytes, :mac, 1
  required ::PbMacType, :type, 2
end

class PbBleDeviceName < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbBleDeviceName"

  required :string, :name, 1
end

class PbDeviceId < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbDeviceId"

  required :string, :device_id, 1
end

class PbRunningIndex < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbRunningIndex"

  required :uint32, :value, 1
  optional ::PbDuration, :calculation_time, 2
end

class PbSportIdentifier < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbSportIdentifier"

  required :uint64, :value, 1
end

class PbOneLineText < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbOneLineText"

  required :string, :text, 1
end

class PbMultiLineText < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbMultiLineText"

  required :string, :text, 1
end

class PbLanguageId < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbLanguageId"

  required :string, :language, 1
end

class PbTrainingSessionTargetId < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbTrainingSessionTargetId"

  required :uint64, :value, 1
  optional ::PbSystemDateTime, :last_modified, 2
end

class PbTrainingSessionFavoriteId < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbTrainingSessionFavoriteId"

  required :uint64, :value, 1
  optional ::PbSystemDateTime, :last_modified, 2
end

class PbRouteId < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbRouteId"

  required :uint64, :value, 1
end

class PbSwimmingPoolInfo < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbSwimmingPoolInfo"

  optional :float, :pool_length, 1
  required ::PbSwimmingPoolUnits, :swimming_pool_type, 2
end

class PbTrainingProgramId < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbTrainingProgramId"

  required :uint64, :value, 1
end

class PbEventId < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbEventId"

  required :uint64, :value, 1
end

class PbPauseTime < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbPauseTime"

  required ::PbDuration, :start, 1
  required ::PbDuration, :duration, 2
end

class PbStravaSegmentTargets < ::ProtocolBuffers::Message
  set_fully_qualified_name "PbStravaSegmentTargets"

  required ::PbDuration, :own_best, 1
  required ::PbDuration, :kom_qom, 2
end

class PbStravaSegmentTarget < ::ProtocolBuffers::Message
  # forward declarations

  # enums
  module PbStravaSegmentType
    include ::ProtocolBuffers::Enum

    set_fully_qualified_name "PbStravaSegmentTarget.PbStravaSegmentType"

    STRAVA_SEGMENT_TYPE_RIDE = 1
    STRAVA_SEGMENT_TYPE_RUN = 2
  end

  set_fully_qualified_name "PbStravaSegmentTarget"

  required ::PbStravaSegmentTarget::PbStravaSegmentType, :strava_segment_type, 1
  required ::PbStravaSegmentTargets, :strava_segment_targets, 2
end

